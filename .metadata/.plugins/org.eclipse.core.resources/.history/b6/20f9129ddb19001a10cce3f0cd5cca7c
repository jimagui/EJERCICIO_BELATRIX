package pe.com.sisgedo.core.jobLogger;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.util.Date;
import java.util.Map;
import java.util.logging.ConsoleHandler;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;

import pe.com.sisgedo.core.util.Conexion;

public class JobLogger {
	private static boolean logToFile;
	private static boolean logToConsole;
	private static boolean logMessage;
	private static boolean logWarning;
	private static boolean logError;
	private static boolean logToDatabase;
	private boolean initialized;
	private static Map dbParams;
	private static Logger logger;

	public JobLogger(boolean logToFileParam, boolean logToConsoleParam, boolean logToDatabaseParam,
			         boolean logMessageParam, boolean logWarningParam, boolean logErrorParam, Map dbParamsMap) {
		logger = Logger.getLogger("MyLog");  
		logError = logErrorParam;
		logMessage = logMessageParam;
		logWarning = logWarningParam;
		logToDatabase = logToDatabaseParam;
		logToFile = logToFileParam;
		logToConsole = logToConsoleParam;
		dbParams = dbParamsMap;
	}
	
	public static void LogMessage(String messageText, boolean message, boolean warning, boolean error) throws Exception {		
		if(validationLogMessage(messageText,message,warning,error)){
			
			messageText = messageText.trim();		
			if(logToFile) {
				createFile(dbParams.get("logFileFolder").toString(),"logFile.txt");
				FileHandler fh = new FileHandler(dbParams.get("logFileFolder") + "/logFile.txt");
				logger.addHandler(fh);
				writeFormatLog(messageText,message,warning,error);
			}			
			if(logToConsole) {
				ConsoleHandler ch = new ConsoleHandler();
				logger.addHandler(ch);
				writeFormatLog(messageText,message,warning,error);
				
			}			
			if(logToDatabase) {			
				insertLogToDataBase(messageText,message,warning,error);				
			}
		}
	}
	
	
	private static boolean validationLogMessage(String messageText, boolean message, boolean warning, boolean error)throws Exception{
    	if (!logToConsole && !logToFile && !logToDatabase) {
			throw new Exception("Invalid configuration");
		}
    	if ((!logError && !logMessage && !logWarning) || (!message && !warning && !error)) {
			throw new Exception("Error or Warning or Message must be specified");
		}	
    	if (messageText == null || messageText.isEmpty()) {
			return false;
		}
    	return true;
    }
    
    private static void createFile(String folder,String nameFile) throws IOException{
    	File logFile = new File(folder + "/"+nameFile);
		if (!logFile.exists()) {
			logFile.createNewFile();
		}
    }
    
    private static void writeFormatLog(String messageText, boolean message, boolean warning, boolean error){
    	
    	String fecha= DateFormat.getDateInstance(DateFormat.LONG).format(new Date())+" ";
    	if (error && logError) {
			String msj =  "error " + fecha+ messageText;
			logger.log(Level.SEVERE, msj);
		}

		if (warning && logWarning) {
			String msj = "warning " +fecha + messageText;
			logger.log(Level.WARNING, msj);
		}

		if (message && logMessage) {
			String msj = "message " +fecha + messageText;
			logger.log(Level.INFO, msj);
		}
    }
	
    private static void insertLogToDataBase(String messageText, boolean message, boolean warning, boolean error) throws SQLException{
    	Conexion con = Conexion.getInstancia(dbParams.get("dbms").toString(), dbParams.get("serverName").toString(), 
                dbParams.get("portNumber").toString(),dbParams.get("database").toString(),  dbParams.get("userName").toString(),
                dbParams.get("password").toString());
        con.conectar();
		
       
        
		if (message && logMessage) {
			String msj = "message " +DateFormat.getDateInstance(DateFormat.LONG).format(new Date()) + messageText;
			con.ejecutarUpdateQuery("insert into Log_ Values('" + msj + "','" + String.valueOf(1) + "')");
		}

		if (error && logError) {
			String msj = "error " + DateFormat.getDateInstance(DateFormat.LONG).format(new Date()) + messageText;
			con.ejecutarUpdateQuery("insert into Log_ Values('" + msj + "','" + String.valueOf(2) + "')");
		}

		if (warning && logWarning) {
			String msj = "warning " +DateFormat.getDateInstance(DateFormat.LONG).format(new Date()) + messageText;
			con.ejecutarUpdateQuery("insert into Log_ Values('" + msj + "', '" + String.valueOf(3) + "')");
		}
		
		
		con.desconectar();
    }
}
